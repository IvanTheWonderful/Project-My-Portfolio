{"ast":null,"code":"var _jsxFileName = \"/Users/haifengwang/_Red/_Projects/project_covid-19_app/src/Components/Components-Chart/BarGraph/BarGraph.js\";\n// import React, {useState} from 'react';\n// import {Polar} from 'react-chartjs-2';\n// var country, cases, todayCases, deaths, todayDeaths, recovered, critical;\n// var selectedCountry = new String;\n// const Graph = (props) => {\n//   const [selectedCountry, setSelectedCountry] = useState(\"Canada\")\n//   function changeSelectedCountry() {\n//     setSelectedCountry(document.getElementById(\"graphCountry\").value)\n//   }\n//   console.log(selectedCountry)\n//   props.allInfo[0].forEach(element => {\n//     if (element.country === selectedCountry){\n//         country = element.country;\n//         cases = element.cases;\n//         todayCases = element.todayCases;\n//         deaths = element.deaths;\n//         todayDeaths = element.todayDeaths;\n//         recovered = element.recovered;\n//         critical = element.critical;\n//     }\n// })\n//   // const [ selectedCountry, setSelectedCountry] = useState('Select Country')\n//   const data = {\n//     labels: ['Total Cases', 'New Cases Today', 'Critical Cases', 'Total Deaths', 'Deaths Today', 'Confirmed Recoveries'],\n//     datasets: \n//         {\n//         label: {country},\n//         backgroundColor: ['rgba(100,99,200,0.7)', 'rgba(22, 30, 181, 0.5)', 'rgba(255,99,132,0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(32, 243, 106, 0.7)'],\n//         borderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         borderWidth: 1,\n//         hoverBackgroundColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 0.7)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         hoverBorderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         data: [{cases}, {todayCases}, {critical}, {deaths}, {todayDeaths}, {recovered}]\n//         }\n//     };\n//     return (\n//     <div className=\"currentPage\">\n//       <h2>COVID-19 in {country}</h2>\n//       <Polar\n//         data={data}\n//         width={400}\n//         height={400}\n//         options={{\n//           maintainAspectRatio: true\n//         }}\n//       />\n//       <input type=\"text\" id=\"graphCountry\" value={selectedCountry} onChange={changeSelectedCountry}></input>\n//     </div>\n//   )\n// }\n// export default Graph\nimport React, { useState } from 'react'; // import {Polar} from 'react-chartjs-2';\n\nvar country, cases, todayCases, deaths, todayDeaths, recovered, critical;\n\nconst Graph = props => {\n  const [selectedCountry, setSelectedCountry] = useState(\"Canada\"); // console.log(props.allInfo[0][0].country)\n\n  function changeSelectedCountry() {\n    setSelectedCountry(document.getElementById(\"graphCountry\").value);\n  }\n\n  props.allInfo[0].forEach(element => {\n    if (element.country === selectedCountry) {\n      country = element.country;\n      cases = element.cases;\n      todayCases = element.todayCases;\n      deaths = element.deaths;\n      todayDeaths = element.todayDeaths;\n      recovered = element.recovered;\n      critical = element.critical;\n    }\n  });\n  const data = {\n    labels: ['Total Cases', 'New Cases Today', 'Critical Cases', 'Total Deaths', 'Deaths Today', 'Confirmed Recoveries'],\n    datasets: {\n      label: {\n        country\n      },\n      backgroundColor: ['rgba(100,99,200,0.7)', 'rgba(22, 30, 181, 0.5)', 'rgba(255,99,132,0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(32, 243, 106, 0.7)'],\n      borderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n      borderWidth: 1,\n      hoverBackgroundColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 0.7)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n      hoverBorderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n      data: [{\n        cases\n      }, {\n        todayCases\n      }, {\n        critical\n      }, {\n        deaths\n      }, {\n        todayDeaths\n      }, {\n        recovered\n      }]\n    }\n  };\n  console.log(data);\n  return React.createElement(\"div\", {\n    className: \"currentPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, \"COVID-19 in \", country), React.createElement(Polar, {\n    data: data,\n    width: 400,\n    height: 400,\n    options: {\n      maintainAspectRatio: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"graphCountry\",\n    value: selectedCountry,\n    onChange: changeSelectedCountry,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }));\n};\n\nexport default Graph;","map":{"version":3,"sources":["/Users/haifengwang/_Red/_Projects/project_covid-19_app/src/Components/Components-Chart/BarGraph/BarGraph.js"],"names":["React","useState","country","cases","todayCases","deaths","todayDeaths","recovered","critical","Graph","props","selectedCountry","setSelectedCountry","changeSelectedCountry","document","getElementById","value","allInfo","forEach","element","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","console","log","maintainAspectRatio"],"mappings":";AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B,C,CACA;;AAEA,IAAIC,OAAJ,EAAaC,KAAb,EAAoBC,UAApB,EAAgCC,MAAhC,EAAwCC,WAAxC,EAAqDC,SAArD,EAAgEC,QAAhE;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,QAAD,CAAtD,CADuB,CAEvB;;AACA,WAASY,qBAAT,GAAiC;AAC/BD,IAAAA,kBAAkB,CAACE,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,KAAzC,CAAlB;AACD;;AACDN,EAAAA,KAAK,CAACO,OAAN,CAAc,CAAd,EAAiBC,OAAjB,CAAyBC,OAAO,IAAI;AAClC,QAAIA,OAAO,CAACjB,OAAR,KAAoBS,eAAxB,EAAwC;AACtCT,MAAAA,OAAO,GAAGiB,OAAO,CAACjB,OAAlB;AACAC,MAAAA,KAAK,GAAGgB,OAAO,CAAChB,KAAhB;AACAC,MAAAA,UAAU,GAAGe,OAAO,CAACf,UAArB;AACAC,MAAAA,MAAM,GAAGc,OAAO,CAACd,MAAjB;AACAC,MAAAA,WAAW,GAAGa,OAAO,CAACb,WAAtB;AACAC,MAAAA,SAAS,GAAGY,OAAO,CAACZ,SAApB;AACAC,MAAAA,QAAQ,GAAGW,OAAO,CAACX,QAAnB;AACD;AACF,GAVD;AAWA,QAAMY,IAAI,GAAG;AACPC,IAAAA,MAAM,EAAE,CAAC,aAAD,EAAgB,iBAAhB,EAAmC,gBAAnC,EAAqD,cAArD,EAAqE,cAArE,EAAqF,sBAArF,CADD;AAEPC,IAAAA,QAAQ,EACJ;AACAC,MAAAA,KAAK,EAAE;AAACrB,QAAAA;AAAD,OADP;AAEAsB,MAAAA,eAAe,EAAE,CAAC,sBAAD,EAAyB,wBAAzB,EAAmD,sBAAnD,EAA2E,uBAA3E,EAAoG,uBAApG,EAA6H,yBAA7H,CAFjB;AAGAC,MAAAA,WAAW,EAAE,CAAC,oBAAD,EAAuB,sBAAvB,EAA+C,oBAA/C,EAAqE,qBAArE,EAA4F,qBAA5F,EAAmH,uBAAnH,CAHb;AAIAC,MAAAA,WAAW,EAAE,CAJb;AAKAC,MAAAA,oBAAoB,EAAE,CAAC,oBAAD,EAAuB,wBAAvB,EAAiD,oBAAjD,EAAuE,qBAAvE,EAA8F,qBAA9F,EAAqH,uBAArH,CALtB;AAMAC,MAAAA,gBAAgB,EAAE,CAAC,oBAAD,EAAuB,sBAAvB,EAA+C,oBAA/C,EAAqE,qBAArE,EAA4F,qBAA5F,EAAmH,uBAAnH,CANlB;AAOAR,MAAAA,IAAI,EAAE,CAAC;AAACjB,QAAAA;AAAD,OAAD,EAAU;AAACC,QAAAA;AAAD,OAAV,EAAwB;AAACI,QAAAA;AAAD,OAAxB,EAAoC;AAACH,QAAAA;AAAD,OAApC,EAA8C;AAACC,QAAAA;AAAD,OAA9C,EAA6D;AAACC,QAAAA;AAAD,OAA7D;AAPN;AAHG,GAAb;AAaMsB,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACN,SACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiBlB,OAAjB,CADF,EAEG,oBAAC,KAAD;AACC,IAAA,IAAI,EAAEkB,IADP;AAEC,IAAA,KAAK,EAAE,GAFR;AAGC,IAAA,MAAM,EAAE,GAHT;AAIC,IAAA,OAAO,EAAE;AACPW,MAAAA,mBAAmB,EAAE;AADd,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,EAUE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,cAAtB;AAAqC,IAAA,KAAK,EAAEpB,eAA5C;AAA6D,IAAA,QAAQ,EAAEE,qBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAcD,CA7CD;;AA+CA,eAAeJ,KAAf","sourcesContent":["// import React, {useState} from 'react';\n// import {Polar} from 'react-chartjs-2';\n\n\n// var country, cases, todayCases, deaths, todayDeaths, recovered, critical;\n// var selectedCountry = new String;\n// const Graph = (props) => {\n//   const [selectedCountry, setSelectedCountry] = useState(\"Canada\")\n//   function changeSelectedCountry() {\n//     setSelectedCountry(document.getElementById(\"graphCountry\").value)\n//   }\n\n//   console.log(selectedCountry)\n\n//   props.allInfo[0].forEach(element => {\n//     if (element.country === selectedCountry){\n//         country = element.country;\n//         cases = element.cases;\n//         todayCases = element.todayCases;\n//         deaths = element.deaths;\n//         todayDeaths = element.todayDeaths;\n//         recovered = element.recovered;\n//         critical = element.critical;\n//     }\n// })\n//   // const [ selectedCountry, setSelectedCountry] = useState('Select Country')\n//   const data = {\n//     labels: ['Total Cases', 'New Cases Today', 'Critical Cases', 'Total Deaths', 'Deaths Today', 'Confirmed Recoveries'],\n//     datasets: \n//         {\n//         label: {country},\n//         backgroundColor: ['rgba(100,99,200,0.7)', 'rgba(22, 30, 181, 0.5)', 'rgba(255,99,132,0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(32, 243, 106, 0.7)'],\n//         borderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         borderWidth: 1,\n//         hoverBackgroundColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 0.7)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         hoverBorderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n//         data: [{cases}, {todayCases}, {critical}, {deaths}, {todayDeaths}, {recovered}]\n//         }\n\n//     };\n    \n\n//     return (\n//     <div className=\"currentPage\">\n//       <h2>COVID-19 in {country}</h2>\n//       <Polar\n//         data={data}\n//         width={400}\n//         height={400}\n//         options={{\n//           maintainAspectRatio: true\n//         }}\n//       />\n//       <input type=\"text\" id=\"graphCountry\" value={selectedCountry} onChange={changeSelectedCountry}></input>\n//     </div>\n//   )\n// }\n// export default Graph\n\nimport React, {useState} from 'react';\n// import {Polar} from 'react-chartjs-2';\n\nvar country, cases, todayCases, deaths, todayDeaths, recovered, critical;\n\nconst Graph = (props) => {\n  const [selectedCountry, setSelectedCountry] = useState(\"Canada\")\n  // console.log(props.allInfo[0][0].country)\n  function changeSelectedCountry() {\n    setSelectedCountry(document.getElementById(\"graphCountry\").value)\n  }\n  props.allInfo[0].forEach(element => {\n    if (element.country === selectedCountry){\n      country = element.country;\n      cases = element.cases;\n      todayCases = element.todayCases;\n      deaths = element.deaths;\n      todayDeaths = element.todayDeaths;\n      recovered = element.recovered;\n      critical = element.critical;\n    }\n  })\n  const data = {\n        labels: ['Total Cases', 'New Cases Today', 'Critical Cases', 'Total Deaths', 'Deaths Today', 'Confirmed Recoveries'],\n        datasets: \n            {\n            label: {country},\n            backgroundColor: ['rgba(100,99,200,0.7)', 'rgba(22, 30, 181, 0.5)', 'rgba(255,99,132,0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(239, 9, 36, 0.7)', 'rgba(32, 243, 106, 0.7)'],\n            borderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n            borderWidth: 1,\n            hoverBackgroundColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 0.7)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n            hoverBorderColor: ['rgba(100,99,132,1)', 'rgba(22, 30, 181, 1)', 'rgba(255,99,132,1)', 'rgba(239, 9, 36, 1)', 'rgba(239, 9, 36, 1)', 'rgba(32, 243, 106, 1)'],\n            data: [{cases}, {todayCases}, {critical}, {deaths}, {todayDeaths}, {recovered}]\n            }\n        };\n        console.log(data)\n  return (\n    <div className=\"currentPage\">\n      <h2>COVID-19 in {country}</h2>\n       <Polar\n        data={data}\n        width={400}\n        height={400}\n        options={{\n          maintainAspectRatio: true\n        }}\n      />\n      <input type=\"text\" id=\"graphCountry\" value={selectedCountry} onChange={changeSelectedCountry}></input>\n    </div>\n  )\n}\n\nexport default Graph"]},"metadata":{},"sourceType":"module"}